#The sequence of triangle numbers is generated by adding the natural numbers.
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.

#What is the value of the first triangle number to have over five hundred divisors?
from math import sqrt  

def smallest_factor(n):
    '''
    Retorna el factor primo de n más chico
    '''
    if n < 2:
        return None # No tiene factores primos 
    
    test_factor = 2 # El factor primo más chico posible 
    max_factor = sqrt(n) # No hay que buscar más allá de la raíz de N 
    
    while test_factor <= max_factor:
        if n%test_factor == 0:
            return test_factor
        test_factor = test_factor + 1   
    
    return n  # Si no se encuentra un factor hasta la raiz de n, n es primo! 

def decompose(N):
    '''
    Retorna la descomposicion de N en enteros positivos, como un diccionario con 
    numeros primos como las keys y los exponentes como las values. 
    '''     
    current_number = N  # We'll divide out factors from current_number until we get 1.
    decomp = {} # E
    while current_number > 1:
        p = smallest_factor(current_number) # El factor primo más pequeño 
        if p in decomp.keys():  # Está P en el diccionario?
            decomp[p] = decomp[p] + 1 # Incrementa el valor del exponente por 1
        else:  # si P no está en el diccionrio 
            decomp[p] = 1  # Crea una nueva entrada en el diccionario 
        current_number = current_number // p # Factor out p.  Integer division!
    return decomp

def num_factors(N): 
'''Retorna la cantidad de factores para un número'''
    factors = decompose(N)
    prod = 1
    for valor in factors.values(): 
        prod *= valor + 1; 

    return prod

if __name__ == "__main__": 
    triangle_number = 0
    num = 1 
    factors = 0

    while factors < 500: 
        triangle_number += num 
        num += 1

        factors = num_factors(triangle_number)

print(triangle_number)




